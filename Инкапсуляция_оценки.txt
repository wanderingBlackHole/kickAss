Таблица с временными оценками

    Метод                    Массив          Стеки         Односвязный список       Двусвязный список
-------------------------------------------------------------------------------------------------------
|moveCursorForward      |   O(1)        |   O(1)        |   O(1)                |   O(1)              |
-------------------------------------------------------------------------------------------------------
|moveCursorBackward     |   O(1)        |   O(1)        |   O(N)                |   O(1)              |
-------------------------------------------------------------------------------------------------------
|moveCursorToStart      |   O(1)        |   O(N)        |   O(1)                |   O(1)              |
-------------------------------------------------------------------------------------------------------
|moveCursorToEnd        |   O(1)        |   O(N)        |   O(N)                |   O(1)              |
-------------------------------------------------------------------------------------------------------
|insertCharacter        |   O(N)        |   O(1)        |   O(1)                |   O(1)              |
-------------------------------------------------------------------------------------------------------
|deleteCharacter        |   O(N)        |   O(1)        |   O(1)                |   O(1)              |
-------------------------------------------------------------------------------------------------------

* Реализация буферов с помощью массивов не затратна по памяти так как нам требуется кроме собственно символов
одна интовая переменная положения курсора и одна - длины массива (для динамического
массива - еще переменная, хранящая текущую емкость); однако массив фиксированной длины ограничен по числу символов; 
проблема с временем выполнения в том, что  при вставке/удалении символа в начало буфера нам надо сдвинуть каждый символ в массиве 
на одну позицию вправо, из-за чего время выполнения зависит от числа символов в буфере.

* Стеки затратнее по памяти, по времени выполнения соотносятся с массивами, так как все равно
придется использовать циклы. Но плюсы стеков в том, что они быстрее в реализации вставки/удаления символов, которые
все-таки более ходовые чем перемещение к концу/началу. Вообще так-то норм метод(?).

* Односвязный список плох по затратам памяти, потому что на *каждый* символ приходятся лишние 4 байта (указатель),
и мы имеем проблему с обходом списка для перемещения назад, что делает его временные характеристики 
соотносимыми с предыдущими методами.

* Двусвязный список решает эту проблему, так как мы имеем указатели в обе стороны, но за скорость 
расплачиваемся капец какими затратами памяти (8 лишних байт на каждый символ).
